type Query {
    usersWithoutTeam: [UserDTO!]!
    allUsers: [UserDTO!]!
}

type Mutation {
    registerUser(input: RegisterInput!): AuthResponse!
    loginUser(input: LoginInput!): AuthResponse!
}

input RegisterInput {
    username: String!
    email: String!
    password: String!
    avatarUrl: String
}

input LoginInput {
    usernameOrEmail: String!
    password: String!
}

type AuthResponse {
    token: String!
    user: UserDTO!
    message: String!
}

type UserDTO {
    id: ID!
    username: String!
    email: String!
    avatarUrl: String
    role: String!
    createdAt: String!
    lastLoginAt: String
    isLookingForTeam: Boolean!
    isActive: Boolean!
}

enum Roles {
    ADMIN
    PLAYER
}
